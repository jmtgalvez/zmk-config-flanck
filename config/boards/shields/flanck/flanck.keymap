#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define SCROT LC(LS(LG(N4)))
#define P_TEXT RS(RA(RG(V)))

&lt {
    tapping-term-ms = <200>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
   &kp TAB              &kp Q       &kp W       &kp E       &kp R       &kp T         &kp Y           &kp U       &kp I       &kp O       &kp P       &kp LG(L)
   &lt 5 ESC            &kp A       &kp S       &kp D       &kp F       &kp G         &kp H           &kp J       &kp K       &kp L       &kp SEMI    &kp SINGLE_QUOTE
   &kp LSHIFT           &kp Z       &kp X       &kp C       &kp V       &kp B         &kp N           &kp M       &kp COMMA   &kp DOT     &kp SLASH   &kp RSHIFT 
   &kp LCTRL            &to 4       &none       &kp LGUI    &kp LALT    &lt 1 SPACE   &lt 2 BSPC      &kp DEL     &kp RALT    &kp RGUI    &kp CAPS    &kp RETURN
            >;
        };

        lower_layer {
            bindings = <
   &trans               &kp PG_UP   &kp HOME    &kp UP      &kp END     &kp K_VOL_UP  &kp KP_NUMLOCK  &kp KP_N7   &kp KP_N8    &kp KP_N9   &kp PLUS   &kp BSLH
   &kp GRAVE            &kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &kp K_VOL_DN  &none           &kp KP_N4   &kp KP_N5    &kp KP_N6   &kp MINUS  &kp SLASH
   &trans               &kp INSERT  &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LC(B)     &none           &kp KP_N1   &kp KP_N2    &kp KP_N3   &kp KP_N0  &none
   &trans               &none       &trans      &trans      &trans      &trans        &lt 3 BSPC      &kp KP_N0   &kp KP_DOT   &none       &kp SLASH  &kp EQUAL
            >;
        };

        raise_layer {
            bindings = <
   &trans               &kp N1      &kp N2      &kp N3      &kp N4      &kp N5        &kp N6        &kp N7        &kp N8        &kp N9          &kp N0        &kp PIPE
   &kp RS(GRAVE)        &kp RS(N1)  &kp RS(N2)  &kp RS(N3)  &kp RS(N4)  &kp RS(N5)    &kp RS(N6)    &kp RS(N7)    &kp RS(N8)    &kp RS(N9)      &kp RS(N0)    &none
   &kp CAPS             &kp RBKT    &kp LBKT    &kp RBRC    &kp LBRC    &none         &none         &kp PSCRN     &kp SLCK      &kp PAUSE_BREAK &none         &none 
   &trans               &trans      &trans      &trans      &trans      &lt 3 SPACE   &trans        &none         &none         &none           &none         &kp LA(PSCRN)
           >;
        };

        nav_layer {
            bindings = <
    &trans              &none       &none   &none   &none       &none   &none    &none    &kp LG(UP)   &kp LG(DOWN)  &none      &none
    &kp F1              &kp F2      &kp F3  &kp F4  &kp F5      &kp F6  &kp F7   &kp F8   &kp F9       &kp F10       &kp F11    &kp F12
    &kp F13             &kp F14     &kp F15 &kp F16 &kp F17     &kp F18 &kp F19  &kp F20  &kp F21      &kp F22       &kp F23    &kp F24
    &kp LG(LC(LEFT))    &trans      &trans  &trans  &trans      &trans  &trans   &trans   &trans       &trans        &trans     &kp LG(LC(RIGHT))
           >;
        };

        misc_layer {
            bindings = <
  &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none  &none  &none  &none  &none  &bootloader
  &out OUT_TOG     &none        &none        &none        &none        &none        &none         &none  &none  &none  &none  &none
  &none     &none        &kp SCROT    &none        &kp P_TEXT   &none        &none         &none  &none  &none  &none  &none
  &none     &to 0       &none       &none       &none       &none       &none        &none &none &none &none &none
           >;
        };
    };

};
